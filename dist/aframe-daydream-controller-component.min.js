!function(t){function e(o){if(n[o])return n[o].exports;var i=n[o]={exports:{},id:o,loaded:!1};return t[o].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){if("undefined"==typeof AFRAME)throw new Error("Component attempted to register before AFRAME was available.");var o=AFRAME.utils.bind,i=AFRAME.utils.trackedControls,r="https://cdn.aframe.io/controllers/vive/vr_controller_vive.obj",s="https://cdn.aframe.io/controllers/vive/vr_controller_vive.mtl",a="Daydream Controller",l=n(1).default;AFRAME.registerComponent("daydream-controller",{multiple:!1,schema:{controller:{default:0},id:{default:"Match none by default!"},rotationOffset:{default:0},hand:{default:"left"},buttonColor:{default:"#FAFAFA"},buttonTouchedColor:{default:"yellow"},buttonPressedColor:{default:"orange"},model:{default:!0},rotationOffset:{default:0},gestureTimeoutLimit:{default:100},gestureTolerance:{default:.2}},mapping:{axis0:"trackpad",axis1:"trackpad",button0:"trackpad"},bindMethods:function(){this.onModelLoaded=o(this.onModelLoaded,this),this.onControllersUpdate=o(this.onControllersUpdate,this),this.checkIfControllerPresent=o(this.checkIfControllerPresent,this),this.removeControllersUpdateListener=o(this.removeControllersUpdateListener,this),this.onGamepadConnected=o(this.onGamepadConnected,this),this.onGamepadDisconnected=o(this.onGamepadDisconnected,this)},init:function(){var t=this;this.animationActive="pointing",this.onButtonChanged=o(this.onButtonChanged,this),this.onButtonDown=function(e){t.onButtonEvent(e.detail.id,"down")},this.onButtonUp=function(e){t.onButtonEvent(e.detail.id,"up")},this.onButtonTouchStart=function(e){t.onButtonEvent(e.detail.id,"touchstart")},this.onButtonTouchEnd=function(e){t.onButtonEvent(e.detail.id,"touchend")},this.onAxisMove=o(this.onAxisMove,this),this.controllerPresent=!1,this.everGotGamepadEvent=!1,this.lastControllerCheck=0,this.bindMethods(),this.isControllerPresent=i.isControllerPresent,this.axisGestureTimeoutLimit=100,this.axisGestureVelocity=100,this.axisGestureThreshold=.1,this.buttonStates={},this.previousAxis=[],this.previousControllerPosition=new THREE.Vector3,this.armModel=new l},addEventListeners:function(){var t=this.el;t.addEventListener("buttonchanged",this.onButtonChanged),t.addEventListener("buttondown",this.onButtonDown),t.addEventListener("buttonup",this.onButtonUp),t.addEventListener("touchstart",this.onButtonTouchStart),t.addEventListener("axismove",this.onAxisMove),t.addEventListener("touchend",this.onButtonTouchEnd),t.addEventListener("model-loaded",this.onModelLoaded)},removeEventListeners:function(){var t=this.el;t.removeEventListener("buttonchanged",this.onButtonChanged),t.removeEventListener("buttondown",this.onButtonDown),t.removeEventListener("buttonup",this.onButtonUp),t.removeEventListener("touchstart",this.onButtonTouchStart),t.removeEventListener("axismove",this.onAxisMove),t.removeEventListener("touchend",this.onButtonTouchEnd),t.removeEventListener("model-loaded",this.onModelLoaded)},getControllerIfPresent:function(){var t=this.getGamepadsByPrefix(a);if(t&&t.length)return t[0]},checkIfControllerPresent:function(){var t=(this.data,this.isControllerPresent(this.el.sceneEl,a,{}));t!==this.controllerPresent&&(this.controllerPresent=t,t?(this.injectTrackedControls(),this.addEventListeners()):this.removeEventListeners())},onGamepadConnected:function(t){this.checkIfControllerPresent()},onGamepadDisconnected:function(t){this.checkIfControllerPresent()},tick:function(){var t=this.el.getObject3D("mesh");t&&t.update&&t.update(delta/1e3),this.updatePose(),this.updateButtons()},play:function(){this.checkIfControllerPresent(),window.addEventListener("gamepadconnected",this.onGamepadConnected,!1),window.addEventListener("gamepaddisconnected",this.onGamepadDisconnected,!1),this.addControllersUpdateListener()},pause:function(){window.removeEventListener("gamepadconnected",this.onGamepadConnected,!1),window.removeEventListener("gamepaddisconnected",this.onGamepadDisconnected,!1),this.removeControllersUpdateListener(),this.removeEventListeners()},injectTrackedControls:function(){var t=this.el,e=this.data,n=r,o=s;this.controller=i.getGamepadsByPrefix(a)[0],e.model&&t.setAttribute("obj-model",{obj:n,mtl:o})},addControllersUpdateListener:function(){this.el.sceneEl.addEventListener("controllersupdated",this.onControllersUpdate,!1)},removeControllersUpdateListener:function(){this.el.sceneEl.removeEventListener("controllersupdated",this.onControllersUpdate,!1)},onControllersUpdate:function(){this.everGotGamepadEvent||this.checkIfControllerPresent()},onButtonChanged:function(t){var e;this.mapping["button"+t.detail.id],this.buttonMeshes;e=t.detail.state.value},onAxisMove:function(t){console.log("axismove",t.detail)},onModelLoaded:function(t){var e,n=t.detail.model;this.data.model&&(e=this.buttonMeshes={},e.menu=n.getObjectByName("menubutton"),e.system=n.getObjectByName("systembutton"),e.trackpad=n.getObjectByName("touchpad"),n.position.set(0,-.015,.04))},onButtonEvent:function(t,e){var n,o=this.mapping["button"+t];if(Array.isArray(o))for(n=0;n<o.length;n++)this.el.emit(o[n]+e);else this.el.emit(o+e);this.updateModel(o,e)},updateModel:function(t,e){var n;if(this.data.model)if(Array.isArray(t))for(n=0;n<t.length;n++)this.updateButtonModel(t[n],e);else this.updateButtonModel(t,e)},updateButtonModel:function(t,e){var n=this.data.buttonColor;"touchstart"===e||"up"===e?n=this.data.buttonTouchedColor:"down"===e&&(n=this.data.buttonPressedColor);var o=this.buttonMeshes;o&&o[t].material.color.set(n)},updatePose:function(){var t=new THREE.Euler,e=(new THREE.Vector3,new THREE.Quaternion);new THREE.Vector3,new THREE.Object3D,new THREE.Matrix4;return t.order="YXZ",function(){var n,o,i,r=this.el,s=this.controller;if(this.controller){n=s.pose,o=n.orientation||[0,0,0,1],i=n.position||[0,0,0];var a=this.el.sceneEl.camera;e.fromArray(o),this.armModel.setHeadOrientation(a.quaternion),this.armModel.setHeadPosition(a.position),this.armModel.setControllerOrientation(e),this.armModel.update();var l=this.armModel.getPose();t.setFromQuaternion(l.orientation),r.setAttribute("rotation",{x:THREE.Math.radToDeg(t.x),y:THREE.Math.radToDeg(t.y),z:THREE.Math.radToDeg(t.z)+this.data.rotationOffset}),console.log(l.position),r.setAttribute("position",{x:l.position.x,y:l.position.y,z:l.position.z})}}}(),updateButtons:function(){var t,e,n=this.controller;if(this.controller){for(t=0;t<n.buttons.length;++t)e=n.buttons[t],this.handleButton(t,e);this.handleAxes(n.axes)}},handleAxes:function(t){var e,n=this.previousAxis,o=!1;for(e=0;e<t.length;++e)if(n[e]!==t[e]){o=!0;break}o&&(this.previousAxis=t.slice(),this.el.emit("axismove",{axis:this.previousAxis}))},handleButton:function(t,e){var n=!1;n=n||this.handlePress(t,e),n=n||this.handleTouch(t,e),n=n||this.handleValue(t,e),n&&this.el.emit("buttonchanged",{id:t,state:e})},handlePress:function(t,e){var n,o=this.buttonStates,i=o[t]=o[t]||{};return e.pressed!==i.pressed&&(n=e.pressed?"down":"up",this.el.emit("button"+n,{id:t}),i.pressed=e.pressed,!0)},handleTouch:function(t,e){var n,o=this.buttonStates,i=o[t]=o[t]||{};return e.touched!==i.touched&&(n=e.touched?"start":"end",i.touched=e.touched,this.el.emit("touch"+n,{id:t,state:i}),!0)},handleValue:function(t,e){var n=this.buttonStates,o=n[t]=n[t]||{};return e.value!==o.value&&(o.value=e.value,!0)}})},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),i=new THREE.Vector3(.155,-.465,-.15),r=new THREE.Vector3(0,0,-.25),s=new THREE.Vector3(0,0,.05),a=new THREE.Vector3(-.08,.14,.08),l=.4,d=.4,u=.61,h=function(){function t(){n(this,t),this.isLeftHanded=!1,this.controllerQ=new THREE.Quaternion,this.lastControllerQ=new THREE.Quaternion,this.headQ=new THREE.Quaternion,this.headPos=new THREE.Vector3,this.elbowPos=new THREE.Vector3,this.wristPos=new THREE.Vector3,this.time=null,this.lastTime=null,this.rootQ=new THREE.Quaternion,this.pose={orientation:new THREE.Quaternion,position:new THREE.Vector3}}return o(t,[{key:"setControllerOrientation",value:function(t){this.lastControllerQ.copy(this.controllerQ),this.controllerQ.copy(t)}},{key:"setHeadOrientation",value:function(t){this.headQ.copy(t)}},{key:"setHeadPosition",value:function(t){this.headPos.copy(t)}},{key:"setLeftHanded",value:function(t){this.isLeftHanded=t}},{key:"update",value:function(){this.time=performance.now();var t=this.getHeadYawOrientation_(),e=(this.time-this.lastTime)/1e3,n=this.quatAngle_(this.lastControllerQ,this.controllerQ),o=n/e;o>u?this.rootQ.slerp(t,n/10):this.rootQ.copy(t);var h=(new THREE.Euler).setFromQuaternion(this.controllerQ,"YXZ"),c=THREE.Math.radToDeg(h.x),p=this.clamp_((c-11)/39,0,1),v=this.rootQ.clone().inverse();v.multiply(this.controllerQ);var E=this.elbowPos;E.copy(this.headPos).add(i);var f=(new THREE.Vector3).copy(a);f.multiplyScalar(p),E.add(f);var m=this.quatAngle_(v,new THREE.Quaternion),w=THREE.Math.radToDeg(m),y=1-Math.pow(w/180,4),T=l,b=1-l,g=y*(T+b*p*d),C=(new THREE.Quaternion).slerp(v,g),H=C.inverse(),L=v.clone().multiply(H),M=this.wristPos;M.copy(s),M.applyQuaternion(C),M.add(r),M.applyQuaternion(L),M.add(this.elbowPos);var P=(new THREE.Vector3).copy(a);P.multiplyScalar(p);var R=(new THREE.Vector3).copy(this.wristPos);R.add(P),R.applyQuaternion(this.rootQ);var Q=(new THREE.Quaternion).copy(this.controllerQ);this.pose.orientation.copy(Q),this.pose.position.copy(R),this.lastTime=this.time}},{key:"getPose",value:function(){return this.pose}},{key:"getForearmLength",value:function(){return r.length()}},{key:"getElbowPosition",value:function(){var t=this.elbowPos.clone();return t.applyQuaternion(this.rootQ)}},{key:"getWristPosition",value:function(){var t=this.wristPos.clone();return t.applyQuaternion(this.rootQ)}},{key:"getHeadYawOrientation_",value:function(){var t=(new THREE.Euler).setFromQuaternion(this.headQ,"YXZ");t.x=0,t.z=0;var e=(new THREE.Quaternion).setFromEuler(t);return e}},{key:"clamp_",value:function(t,e,n){return Math.min(Math.max(t,e),n)}},{key:"quatAngle_",value:function(t,e){var n=new THREE.Vector3(0,0,-1),o=new THREE.Vector3(0,0,-1);return n.applyQuaternion(t),o.applyQuaternion(e),n.angleTo(o)}}]),t}();e.default=h}]);